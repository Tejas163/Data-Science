# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17lI1-f0huCk29OdesXh1eqSk-vHeiJO4
"""

pip install starlette
pip install uvicorn
pip install aiohttp

from starlette.applications import Starlette
from starlette.responses import JSONResponse
import uvicorn

app=Starlette(debug=True)

@app.route("/")
def form(request):
    return HTMLResponse("""
        <h3>This app will classify Bikes vs Cars<h3>
        <form action="/upload" method="post" enctype="multipart/form-data">
            Select image to upload:
            <input type="file" name="file">
            <input type="submit" value="Upload Image">
        </form>
        Or submit a URL:
        <form action="/classify-url" method="get">
            <input type="url" name="url">
            <input type="submit" value="Fetch and analyze image">
        </form>
    """)

@app.route("/upload", methods=["POST"])
async def upload(request):
  data=await request.form()
  bytes=await (data["file"].read())
  return classify_url(bytes)

@app.route("/classify-url", methods=["GET"])
async def get_bytes(url):
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            return await response.read()
          
async def classify_url(request):
    bytes = await get_bytes(request.query_params["url"])
    img = open_image(BytesIO(bytes))
    _,_,losses = learner.predict(img)
    return JSONResponse({
        "predictions": sorted(
            zip(cat_learner.data.classes, map(float, losses)),
            key=lambda p: p[1],
            reverse=True
        )
    })
  

if __name__ == "__main__":
    if "serve" in sys.argv:
        uvicorn.run(app, host="0.0.0.0", port=80)